{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"AnyConnect%2BCertificate%2Bfor%2BVPN/","title":"AnyConnect Certificate for VPN","text":"<p>To setup your system to use certificate based authentication with AnyConnect:</p> <ol> <li>Generate a system certificate request and key matching your system's     FQDN</li> </ol> <p>Generating the CSR and key with a hostname of 2yd3hm2</p> <p>openssl req -out 2yd3hm2.csr -new -newkey rsa:2048 -nodes -keyout 2yd3hm2.key</p> <p>Generating a 2048 bit RSA private key</p> <p>...................................+++</p> <p>......................................................................+++</p> <p>writing new private key to '2yd3hm2.key'</p> <p>-----</p> <p>You are about to be asked to enter information that will be incorporated</p> <p>into your certificate request.</p> <p>What you are about to enter is what is called a Distinguished Name or a DN.</p> <p>There are quite a few fields but you can leave some blank</p> <p>For some fields there will be a default value,</p> <p>If you enter '.', the field will be left blank.</p> <p>-----</p> <p>Country Name (2 letter code) [XX]:US</p> <p>State or Province Name (full name) []:Nevada</p> <p>Locality Name (eg, city) [Default City]:Las Vegas</p> <p>Organization Name (eg, company) [Default Company Ltd]:Allegiant Air</p> <p>Organizational Unit Name (eg, section) []:LinuxSE</p> <p>Common Name (eg, your name or your server's hostname) []:2yd3hm2.authentication.allegiantair.com</p> <p>Email Address []:</p> <p>Please enter the following 'extra' attributes</p> <p>to be sent with your certificate request</p> <p>A challenge password []:</p> <p>An optional company name []</p> <ol> <li> <p>Send the CSR file to the Windows team for them to sign it with their     CA</p> </li> <li> <p>You will need the signed certificate from Windows, the CA     certificate, and your private key to setup the AnyConnect client</p> </li> <li> <p>Rename the signed certificate file to have a .pem extension and the     key file to have .key</p> </li> <li> <p>Make $HOME/.cisco</p> </li> <li> <p>You will need the following directory structure created under     $HOME/.cisco</p> </li> </ol> <p>Directory tree</p> <p>[16:02:48]-[hj1u@2yd3hm2 .cisco]~/.cisco $ ls -lR</p> <p>.:</p> <p>total 0</p> <p>drwxrwxr-x. 4 hj1u hj1u 30 Jun 17 10:05 certificates</p> <p>./certificates:</p> <p>total 0</p> <p>drwxrwxr-x. 2 hj1u hj1u 88 Jun 17 10:11 ca</p> <p>drwxrwxr-x. 3 hj1u hj1u 41 Jun 17 10:08 client</p> <p>./certificates/ca:</p> <p>total 4</p> <p>-rw-rw-r--. 1 hj1u hj1u 1306 Jun 17 10:07 CACERT.pem</p> <p>./certificates/client:</p> <p>total 4</p> <p>-rw-rw-r--. 1 hj1u hj1u 2178 Jun 17 10:08 myclient.pem</p> <p>drwxrwxr-x. 2 hj1u hj1u 26 Jun 17 10:08 private</p> <p>./certificates/client/private:</p> <p>total 4</p> <p>-rw-rw-r--. 1 hj1u hj1u 1708 Jun 17 10:08 myclient.key</p> <ol> <li> <p>Copy the signed system certificate to     $HOME/.cisco/certificates/client/myclient.pem</p> </li> <li> <p>Copy the CA certificate to $HOME/.cisco/certificates/ca/CACERT.pem     (get the latest AD CA cert from windows eng or pull it yourself)</p> </li> <li> <p>Copy the private key to     $HOME/.cisco/certificates/client/private/myclient.key</p> </li> </ol> <p>It is not important that the certificate and key be called \"myclient\" but they MUST match and MUST end in .pem and .key.</p> <p>You are now configured to use certificate authentication with the AnyConnect VPN client.\u00a0</p>"},{"location":"AnyConnect%2BCertificate%2Bfor%2BVPN/#reference","title":"REFERENCE:","text":"<p>https://www.cisco.com/c/en/us/support/docs/security/anyconnect-secure-mobility-client/214612-configure-anyconnect-secure-mobility-cli.html</p>"},{"location":"Java%2BKeystores/","title":"Java Keystores","text":""},{"location":"Java%2BKeystores/#video-overview","title":"Video Overview:","text":"<p>The following procedure applies to Tomcat and Jboss:</p> <p>Please NOTE:\u00a0</p> <ul> <li> <p>for Jboss Domain (legacy) you need to use a 'keytool' command on one     of the old jboss domain nodes, otherwise the cert format is not     recognized on these old hosts.</p> </li> <li> <p>for Tomcat keystore same applies.</p> </li> <li> <p>for Jboss Standalone and Springboot you can compile the keystore on     your workstation or rather on a Jboss Standalone node.</p> </li> <li> <p>I'm\u00a0 not exactly sure why that is, seems to me it's a version of     keytool matter, but not sure, couldn't spare time to find out why.</p> </li> </ul> <p>Request the Certificate and Key from an InfoSec or Universal resource. You will need to request they download the file in a PEM OpenSSL format, with separate key and cert files:</p> <p>NOTE:</p> <p>If you receive a key/cert from Venify, you will need to decrypt it before use:</p> <p>Use the following command and the supplied password (given to you when the certificate was given) to decrypt the files:</p> <p>###</p> <p>openssl rsa -in \\&lt;original encrypted file name&gt; -out \\&lt;name of new file for decrypted file&gt;</p> <p>###</p> <p>e.g.:</p> <p>openssl rsa -in qa1_wildcard_cert_2022_Key.key_encr -out qa1_wildcard_cert_2022_Key.key</p> <p>You will then be prompted for the encryption key. Input this, and your decrypted file should be generated and can be used in the following steps</p> <p>To properly create a keystore from scratch</p> <p>First make a copy of the cert using the setalias command which will force the friendlyName attribute</p> <p>openssl x509 -in _.allegiantair.com.crt -setalias \"g4_wildcardcert\" -out _.allegiantair.com.alias.crt</p> <p>Next, convert the PEM format to pkcs12, which bundles everything together (provide password: changeit).</p> <p>openssl pkcs12 -export -out _.allegiantair.com.pk12 -name g4_wildcardcert -caname g4_wildcardcert -inkey _.allegiantair.com.key -in _.allegiantair.com.alias.crt -certfile gd_bundle-g2-g1.crt</p> <p>Then, you must convert the pkcs bundle to a Java Keystore</p> <p>keytool -importkeystore -deststorepass changeit -destkeypass changeit -destkeystore jboss.keystore.wcz -srckeystore _.allegiantair.com.pk12 -srcstoretype pkcs12 -srcstorepass XXXXXXXXXX -alias g4_wildcardcert -noprompt</p> <p>You can verify the single entry with the alias of g4_wildcardcert</p> <p>keytool -list -keystore [keystore name]</p> <p>You can then verify the entirety of the new keystore</p> <p>keytool -list -keystore [keystore name] -v</p> <p>It should show the private key, host cert, and CA cert  </p> <p>Passwords mentioned in the commands can be derived from the java_keystore automation in SS\\&amp;M. Unless overridden, the default is changeit.\u00a0 This process can probably be done without them but I maintained the existing passwords in case JBoss and Tomcat have the passwords configured in their XML files.  </p> <p>Once complete and verified, the keystore can be added to automation with the prior mentioned steps:  </p> <p>Base64 encode the file:</p> <p>openssl enc -base64 \\&lt;[filename of the keystore]&gt;[new filename]</p> <p>Add the variable you want the contents assigned to the top of the newly encoded file, usually:</p> <p>---</p> <p>variable_name: |</p> <p>encoded lines are here....</p> <p>You MUST add 2 spaces before each of the encoded lines or ansible will not read the file into the variable  </p> <p>You can then vault the file with ansible.</p>"},{"location":"Java%2BKeystores/#jboss-keystores","title":"JBoss Keystores","text":"<p>Jboss domain keystores are located at /etc/jbossas/domain/jboss.keystore.</p> <p>This keystore is required for the HCs to be able to connect to the DC.</p> <p>Once you have created the above keystore, you can drop this file into the above location (name must remain jboss.keystore).</p>"},{"location":"Java%2BKeystores/#springboot-keystores","title":"Springboot Keystores","text":"<p>Springboot Keystores use the same keystore as jboss. On the springboot hosts, this file is located at **/etc/pki/java/springboot.keystore.\u00a0**</p> <p>This keystore is used for the springboot microservices to contact one another directly.</p> <p>The jboss.keystore file for a given environment can be dropped into this location on a given springboot server (name must remain springboot.keystore). Afterwards, any springboot services would need to be restarted for the updated keystore to take effect.</p>"},{"location":"Java%2BKeystores/#flydesk-keystores","title":"Flydesk Keystores","text":"<p>IMFWS Flydesk keystores are located at /usr/share/java/tomcat</p> <p>The keystore file for a given environment can be dropped into this location on a given server (name must remain keystore). Afterwards, Flydesk (service name: flydesk.target) service would need to be restarted for the updated keystore to take effect.</p>"},{"location":"Java%2BKeystores/#inflight-keystores","title":"INFlight Keystores","text":"<p>IMFWS (InFlight Flydesk)\u00a0keystores are located at /usr/share/java/tomcat7</p> <p>The keystore file for a given environment can be dropped into this location on a given server (name must remain keystore). Afterwards, it is easier to just restart the host so Tomcat and the 4 Flydesk services (admin, discovery, edge, and gatekeeper) will start up in the correct order.</p> <p>IMOWS (InFlight mobile) does not appear to have a keystore.</p>"},{"location":"Java%2BKeystores/#jenkins-keystores","title":"Jenkins Keystores","text":"<p>Jenkins keystores are stored in /var/lib/jenkins/.keystore and have slightly different requirements.\u00a0 There are two entries with two aliases in this keystore: \"1\" and \"internal_ca\".\u00a0 The \"1\" alias is reserved for the certificate and the \"internal_ca\" for the CA bundle cert.</p> <p>Assign the \"1\" alias to the cert:</p> <p>openssl x509 -in _.trn.allegiantair.com -setalias \"1\" -out _.trn.allegiantair.com.alias.crt</p> <p>After gathering the certificate, CA bundle, and private key, bundle them all together:</p> <p>openssl pkcs12 -export -out _.trn.allegiantair.com.pk12 -name 1 -caname internal_ca -inkey _.trn.allegiantair.com.key -in _.trn.allegiantair.com.alias.crt -certfile gd_bundle-g2-g1.crt</p> <p>Now, create the keystore from the pkcs12 bundle (note: the password used will be the same for all fields and can be found in the \"ps -ef | grep jenkins\" output on the host):</p> <p>keytool -importkeystore -srckeystore \\&lt;path-to-bundle-file.pk12&gt; -srcstoretype pkcs12 -destkeystore jenkins.example.com.jks -deststoretype JKS</p> <p>Finally, add the second entry for the \"internal_ca\" alias:</p> <p>keytool -import -alias internal_ca -file gd_bundle-g2-g1.crt -keystore jboss.keystore.trn.jenkins</p>"},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Mulesoft%2BHealth%2BChecks/","title":"Mulesoft Health Checks","text":"<p>Mulesoft Apps - Health checks:</p> <ul> <li>Below listed healthchecks are for STG Env. To run the same for PRD,     remove the \"https://stg.\"</li> </ul> <p>aerodata-sys-api - https://stg.api.aws.allegiantair.com/aerodata-sys-api/diag?IncludeExternal=true comms-exp-api - https://stg.api.aws.allegiantair.com/comms-exp-api/diag?IncludeExternal=true cfdi-process-api - https://stg.api.aws.allegiantair.com/cfdi-process-api/diag?includeExternal=true aip-errormngmt-proc-api - https://stg.api.aws.allegiantair.com/aip-errormngmt-proc-api/diag?IncludeExternal=true navitaire-bridge-proc-api - https://stg.api.aws.allegiantair.com/navitaire-bridge-proc-api/diag?IncludeExternal=true g4-exp-api-impl - https://stg.api.aws.allegiantair.com/g4-exp-api-impl/diag?IncludeExternal=true fuel-management-proc-api - https://stg.api.aws.allegiantair.com/fuel-management-proc-api/diag?IncludeExternal=true financial-proc-api - https://stg.api.aws.allegiantair.com/financial-proc-api/diag?IncludeExternal=true edicom-system-api - https://stg.api.aws.allegiantair.com/edicom-system-api/diag?includeExternal=true trax-fin-sys-api-impl - https://stg.api.aws.allegiantair.com/trax-fin-sys-api-impl/diag?IncludeExternal=true sap-sys-api-impl - https://stg.api.aws.allegiantair.com/sap-sys-api-impl/diag?IncludeExternal=true ops-typeb-proc-api - https://stg.api.aws.allegiantair.com/ops-typeb-proc-api/diag?IncludeExternal=true ops-navitaire-proc-api - https://stg.api.aws.allegiantair.com/ops-navitaire-proc-api/diag?IncludeExternal=true onesource-system-api - https://stg.api.aws.allegiantair.com/onesource-system-api/diag?IncludeExternal=true navitaire-sys-api - https://stg.api.aws.allegiantair.com/navitaire-sys-api/diag?IncludeExternal=true nmqp-exp-api - https://stg.api.aws.allegiantair.com/nmqp-exp-api/diag?IncludeExternal=true helloworld - https://stg.api.aws.allegiantair.com/helloworld/diag?IncludeExternal=true</p>"},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Mulesoft%2BLinux%2BEngineering%2BHowto/","title":"Mulesoft Linux Engineering Howto","text":""},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Mulesoft%2BMonitoring%2B-%2BInstall%2BDynaTrace/","title":"Mulesoft Monitoring - Install DynaTrace","text":"<p>kubectl create namespace dynatrace</p> <ul> <li>Install kubernetes DT operatior ( if your system doesn't have access     to WWW, like the jumphost, then download the file and rsync it to     the jumphost or the host you are operation on ).</li> </ul> <p>kubectl apply -f https://github.com/Dynatrace/dynatrace-operator/releases/download/v0.10.0/kubernetes.yaml</p> <ul> <li> <p>Expected output</p> </li> <li> <p>poddisruptionbudget.policy/dynatrace-webhook created</p> </li> <li> <p>serviceaccount/dynatrace-activegate created</p> </li> <li> <p>serviceaccount/dynatrace-kubernetes-monitoring created</p> </li> <li> <p>serviceaccount/dynatrace-dynakube-oneagent-privileged created</p> </li> <li> <p>serviceaccount/dynatrace-dynakube-oneagent-unprivileged created</p> </li> <li> <p>serviceaccount/dynatrace-operator created</p> </li> <li> <p>serviceaccount/dynatrace-webhook created</p> </li> <li> <p>customresourcedefinition.apiextensions.k8s.io/dynakubes.dynatrace.com     created</p> </li> <li> <p>clusterrole.rbac.authorization.k8s.io/dynatrace-kubernetes-monitoring     created</p> </li> <li> <p>clusterrole.rbac.authorization.k8s.io/dynatrace-operator created</p> </li> <li> <p>clusterrole.rbac.authorization.k8s.io/dynatrace-webhook created</p> </li> <li> <p>clusterrolebinding.rbac.authorization.k8s.io/dynatrace-kubernetes-monitoring     created</p> </li> <li> <p>clusterrolebinding.rbac.authorization.k8s.io/dynatrace-operator     created</p> </li> <li> <p>clusterrolebinding.rbac.authorization.k8s.io/dynatrace-webhook     created</p> </li> <li> <p>role.rbac.authorization.k8s.io/dynatrace-operator created</p> </li> <li> <p>role.rbac.authorization.k8s.io/dynatrace-webhook created</p> </li> <li> <p>rolebinding.rbac.authorization.k8s.io/dynatrace-operator created</p> </li> <li> <p>rolebinding.rbac.authorization.k8s.io/dynatrace-webhook created</p> </li> <li> <p>service/dynatrace-webhook created</p> </li> <li> <p>deployment.apps/dynatrace-operator created</p> </li> <li> <p>deployment.apps/dynatrace-webhook created</p> </li> <li> <p>mutatingwebhookconfiguration.admissionregistration.k8s.io/dynatrace-webhook     created</p> </li> </ul> <p>validatingwebhookconfiguration.admissionregistration.k8s.io/dynatrace-webhook created</p> <ul> <li>Install kubernetes DT operatior CSI agent ( if your system doesn't     have access to WWW, like the jumphost, then download the file and     rsync it to the jumphost or the host you are operation on).</li> </ul> <p>kubectl apply -f https://github.com/Dynatrace/dynatrace-operator/releases/download/v0.10.0/kubernetes-csi.yaml</p> <ul> <li> <p>Expected output</p> </li> <li> <p>serviceaccount/dynatrace-oneagent-csi-driver created</p> </li> <li> <p>clusterrole.rbac.authorization.k8s.io/dynatrace-oneagent-csi-driver     created</p> </li> <li> <p>clusterrolebinding.rbac.authorization.k8s.io/dynatrace-oneagent-csi-driver     created</p> </li> <li> <p>role.rbac.authorization.k8s.io/dynatrace-oneagent-csi-driver created</p> </li> <li> <p>rolebinding.rbac.authorization.k8s.io/dynatrace-oneagent-csi-driver     created</p> </li> <li> <p>daemonset.apps/dynatrace-oneagent-csi-driver created</p> </li> <li> <p>csidriver.storage.k8s.io/csi.oneagent.dynatrace.com created</p> </li> </ul> <p>priorityclass.scheduling.k8s.io/dynatrace-high-priority created</p> <ul> <li>Validate the installation so far</li> </ul> <p>kubectl -n dynatrace wait pod --for=condition=ready --selector=app.kubernetes.io/name=dynatrace-operator,app.kubernetes.io/component=webhook --timeout=300s</p> <ul> <li> <p>Expected output ( the trailing hash will be different ).</p> </li> <li> <p>pod/dynatrace-webhook-5c67d77f4c-57rvq condition met</p> </li> </ul> <p>pod/dynatrace-webhook-5c67d77f4c-tscqz condition met</p> <ul> <li> <p>Login to DynaTrace UI</p> <ul> <li> <p>Manage / DynaTrace Hub</p> </li> <li> <p>TODO - missing the point where the tokens are generated</p> </li> </ul> </li> <li> <p>For cloudNativeFullStack and applicationMonitoring, create a     secret named dynakube holding both the API token and the     dataIngestToken, see Tokens and permissions required. Be sure to     replace the placeholders (\\&lt;...&gt;) with your own values.</p> </li> </ul> <p>kubectl -n dynatrace create secret generic dynakube --from-literal=\"apiToken=\\&lt;API_TOKEN&gt;\" --from-literal=\"dataIngestToken=\\&lt;DATA_INGEST_TOKEN&gt;\"</p> <ul> <li>Download the custom config of DynaKube</li> </ul> <p>wget https://raw.githubusercontent.com/Dynatrace/dynatrace-operator/v0.10.0/assets/samples/cloudNativeFullStack.yaml</p> <ul> <li> <p>Edit the downloaded file and adjust the first few lines to look like     this, MAKE SURE you give it metadata/name as you wish to appear in     Infrastructure/Kubernetes. This will be used as a filter for all     workloads/pods etc. Also make sure the tokens: are set to \"dynakube\"</p> </li> <li> <p>apiVersion: dynatrace.com/v1beta1</p> </li> <li> <p>kind: DynaKube</p> </li> <li> <p>metadata:</p> </li> <li> <p>name: mule-stg-rtf</p> </li> <li> <p>namespace: dynatrace</p> </li> <li> <p>spec:</p> </li> <li> <p># Dynatrace apiUrl including the `/api` path at the end.</p> </li> <li> <p># For SaaS, set `YOUR_ENVIRONMENT_ID` to your environment ID.</p> </li> <li> <p># For Managed, change the apiUrl address.</p> </li> <li> <p># For instructions on how to determine the environment ID and how     to configure the apiUrl address, see     https://www.dynatrace.com/support/help/reference/dynatrace-concepts/environment-id/.</p> </li> <li> <p>apiUrl: https://gah29713.live.dynatrace.com/api</p> </li> <li></li> <li> <p># Optional: Name of the secret holding the credentials required to     connect to the Dynatrace tenant</p> </li> <li> <p># If unset, the name of this custom resource is used</p> </li> <li> <p>#</p> </li> <li> <p>tokens: \"dynakube\"</p> </li> <li></li> <li>Install the DynaKube</li> </ul> <p>kubectl apply -f cloudNativeFullStack.yaml</p> <ul> <li>Expected output</li> </ul> <p>dynakube.dynatrace.com/mule-stg-rtf created</p> <ul> <li>Pull the cluster ID as you will need it to manually connect it in     the Dynatrace UI</li> </ul> <p>kubectl get namespace kube-system -o jsonpath='{.metadata.uid}'</p> <ul> <li> <p>Login to Dynatrace UI</p> </li> <li> <p>Checkout this documentation     https://www.dynatrace.com/support/help/shortlink/deploy-ag-dynatrace-op#local     , We'll use connect manually method</p> </li> <li> </li> <li> <p>Give it few minutes, when you navigate to Infrastructure/Kubernetes     you should see a new entry mule-rtf-stg.</p> </li> <li> <p>Go to settings and enable \"Events\"</p> </li> </ul>"},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Mulesoft%2BMonitoring%2B-%2BInstall%2BDynaTrace/#requirements","title":"Requirements","text":""},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Mulesoft%2BMonitoring%2B-%2BInstall%2BDynaTrace/#firewall","title":"Firewall","text":"<ul> <li> <p>Outbound access from the Mulesoft RTF cluster IP space to     54.198.108.77, 54.227.190.204, 50.17.238.238 IPs on port     443/tcp</p> </li> <li> <p>The FQDN is: gah29713.live.dynatrace.com</p> </li> </ul>"},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Mulesoft%2BMonitoring%2B-%2BInstall%2BDynaTrace/#access-to-internet-on-the-host-you-are-running-the-install-or-a-local-copy-of-the-files-needed-from-git","title":"Access to internet on the host you are running the install or a local copy of the files needed from GIT","text":"<ul> <li> <p>https://github.com/Dynatrace/dynatrace-operator/releases/download/v0.10.0/kubernetes.yaml</p> </li> <li> <p>https://github.com/Dynatrace/dynatrace-operator/releases/download/v0.10.0/kubernetes-csi.yaml</p> </li> <li> <p>https://raw.githubusercontent.com/Dynatrace/dynatrace-operator/v0.10.0/assets/samples/cloudNativeFullStack.yaml     ( you will need to edit this file before the installation)</p> </li> </ul>"},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Mulesoft%2BMonitoring%2B-%2BInstall%2BDynaTrace/#access-to-the-mulesoft-environment","title":"Access to the Mulesoft environment","text":"<ul> <li>kubectl installed, awsauth etc. you can follow Setup access     to Mulesoft kubernetes     environments</li> </ul>"},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Mulesoft%2BMonitoring%2B-%2BInstall%2BDynaTrace/#installation-of-dynatrace-cloudnativefullstack","title":"Installation of DynaTrace cloudNativeFullStack","text":"<ul> <li> <p>Checkout the documentation:     https://www.dynatrace.com/support/help/shortlink/full-stack-dto-k8#manual</p> </li> <li> <p>Create dynatrace namespace</p> </li> </ul>"},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Mulesoft%2BMonitoring%2B-%2BInstall%2BDynaTrace/#provide-the-kubernetes-cluster-id-in-the-dynatrace-web-ui","title":"Provide the Kubernetes cluster ID in the Dynatrace web UI","text":"<ul> <li> <p>In the Dynatrace     &gt; menu,     &gt; go to Kubernetes.</p> </li> <li> <p>Select Connect manually.</p> </li> <li> <p>On the Kubernetes cluster monitoring settings page, provide a     &gt; Name, and then turn on Connect containerized ActiveGate     &gt; to local Kubernetes API endpoint.</p> </li> <li> <p>For Kubernetes cluster ID, enter the UID obtained earlier.</p> </li> <li> <p>Select Save changes to save your configuration. Note:     &gt; You can save your configuration even if the ActiveGate isn't     &gt; ready to connect, and finish the configuration later. To     &gt; verify if it's ready, select Test configuration.</p> </li> </ul>"},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Mulesoft%2BSSL%2Bcertificate%2Brenewal/","title":"Mulesoft SSL certificate renewal","text":""},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Mulesoft%2BSSL%2Bcertificate%2Brenewal/#mule-certificate-update-manual","title":"Mule certificate update (MANUAL)","text":""},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Mulesoft%2BSSL%2Bcertificate%2Brenewal/#download-the-cert-from-venafi","title":"Download the cert from Venafi","text":"<ul> <li> <p>Login to venafi.allegiantair.com</p> </li> <li> <p>Go to 'Inventory/Certificated'</p> </li> <li> <p>In the search 'Certificate Name' type ex:     'stg.api.aws.allegiantair.com' (the CN of your cert)</p> </li> <li> <p>Complete the search and the cert will load on the right hand side,     click on it</p> </li> <li> <p>Then select 'Actions' top right and select 'Download'</p> </li> <li> <p>On the popup select format: 'PEM OpenSSL' and selcet checkbox     'Extract PEM content into separate files (.crt, .key)' type in a new     \u00a0password you will need to decrypt the key later</p> </li> </ul>"},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Mulesoft%2BSSL%2Bcertificate%2Brenewal/#prepare-the-certificate-details","title":"Prepare the certificate details","text":"<ul> <li> <p>Move the dowloaded cert zip file in a folder with a decent name and     explode the zip file there.     \u00a0 ex: unzip stg.api.aws.allegiantair.com.zip</p> </li> <li> <p>Decrypt the key ex:\u00a0     \u00a0 openssl rsa -in stg.api.aws.allegiantair.com.key -out     stg.api.aws.allegiantair.com.key_decrypted     \u00a0 type in the password you set to download the cert from Venafy</p> </li> <li> <p>Prepare base64 one line encrypted value of the decrypted key ex:     base64 -w0 stg.api.aws.allegiantair.com.key_decrypted &gt;     stg.api.aws.allegiantair.com.key_decrypted.base64.one.line</p> </li> </ul> <ul> <li> <p>You need to set up a BUNDLE\u00a0</p> </li> <li> <p>cat ext.stg.api.aws.allegiantair.com.crt &gt;     ext.stg.api.aws.allegiantair.com-bundle.pem</p> </li> <li> <p>cat ext.stg.api.aws.allegiantair.com-chain.pem &gt;&gt;     ext.stg.api.aws.allegiantair.com-bundle.pem</p> </li> <li> <p>This is how you build a bundle server cert on top and CA-chain     afterwards\u00a0</p> </li> <li> <p>Prepare base64 one line encrypted value of the bundle ex: base64 -w0     stg.api.aws.allegiantair.com-bundle.pem &gt;     stg.api.aws.allegiantair.com-bundle.pem.base64.one.line</p> </li> </ul>"},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Mulesoft%2BSSL%2Bcertificate%2Brenewal/#actual-renewal-of-ssl-certificate","title":"Actual renewal of SSL certificate","text":"<p>List all tls/secrets used in the cluster if you like to see them ex: kubectl get secrets --field-selector type=kubernetes.io/tls -A</p> <p>Check what TLS/secrets are in rtf namespace ex: kubectl get secrets --field-selector type=kubernetes.io/tls -n rtf NAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TYPE \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0DATA \u00a0 AGE ext-mulesoft-tls \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 kubernetes.io/tls \u00a0 3 \u00a0 \u00a0 \u00a0356d ext-mulesoft-tls-godaddy \u00a0 kubernetes.io/tls \u00a0 2 \u00a0 \u00a0 \u00a0355d mulesoft-tls \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 kubernetes.io/tls \u00a0 2 \u00a0 \u00a0 \u00a0355d mulesoft-tls-godaddy \u00a0 \u00a0 \u00a0 kubernetes.io/tls \u00a0 2 \u00a0 \u00a0 \u00a0355d</p> <p>List the ingress controllers in the rtf namespace ex: kubectl get ingress -n rtf NAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CLASS \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0HOSTS \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0ADDRESS \u00a0 PORTS \u00a0 \u00a0 AGE ext-rtf-ingress-template \u00a0 rtf-external-nginx \u00a0 ext.stg.api.aws.allegiantair.com \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 80, 443 \u00a0 444d int-rtf-ingress-template \u00a0 rtf-internal-nginx \u00a0 stg.api.aws.allegiantair.com \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 80, 443 \u00a0 444d</p> <p>Do describe on each ingress template to see which tls/secret is in use ex: kubectl describe ingress -n rtf int-rtf-ingress-template</p> <p>Name: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 int-rtf-ingress-template Labels: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \\&lt;none&gt; Namespace: \u00a0 \u00a0 \u00a0 \u00a0rtf Address: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Default backend: \u00a0default-http-backend:80 (\\&lt;error: endpoints \"default-http-backend\" not found&gt;) TLS: \u00a0 mulesoft-tls-godaddy terminates stg.api.aws.allegiantair.com Rules: \u00a0 Host \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Path \u00a0Backends \u00a0 ---- \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0---- \u00a0-------- \u00a0 stg.api.aws.allegiantair.com \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 /app-name \u00a0 service:80 (\\&lt;error: endpoints \"service\" not found&gt;) Annotations: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0external-dns.alpha.kubernetes.io/hostname: stg.api.aws.allegiantair.com \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nginx.ingress.kubernetes.io/configuration-snippet: rewrite ^/app-name(/|$)(.*) /$2 break; \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nginx.ingress.kubernetes.io/rewrite-target: /$2 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nginx.ingress.kubernetes.io/ssl-redirect: true Events: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \\&lt;none&gt;</p> <p>ex: kubectl describe ingress -n rtf ext-rtf-ingress-template</p> <p>Name: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ext-rtf-ingress-template Labels: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \\&lt;none&gt; Namespace: \u00a0 \u00a0 \u00a0 \u00a0rtf Address: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Default backend: \u00a0default-http-backend:80 (\\&lt;error: endpoints \"default-http-backend\" not found&gt;) TLS: \u00a0 ext-mulesoft-tls-godaddy terminates ext.stg.api.aws.allegiantair.com Rules: \u00a0 Host \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Path \u00a0Backends \u00a0 ---- \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0---- \u00a0-------- \u00a0 ext.stg.api.aws.allegiantair.com \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 /app-name \u00a0 service:80 (\\&lt;error: endpoints \"service\" not found&gt;) Annotations: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0external-dns.alpha.kubernetes.io/hostname: ext.stg.api.aws.allegiantair.com \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nginx.ingress.kubernetes.io/configuration-snippet: rewrite ^/app-name(/|$)(.*) /$2 break; \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nginx.ingress.kubernetes.io/rewrite-target: /$2 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nginx.ingress.kubernetes.io/ssl-redirect: true Events: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \\&lt;none&gt;</p> <p>Notice, in this case:</p> <p>int-rtf-ingress-template is using 'mulesoft-tls-godaddy terminates stg.api.aws.allegiantair.com\"</p> <p>ext-rtf-ingress-template is using 'ext-mulesoft-tls-godaddy terminates ext.stg.api.aws.allegiantair.com'</p> <p>Backup the TLS secret you are going to update</p> <p>ex:</p> <p>kubectl get secret mulesoft-tls-godaddy -n rtf -o yaml &gt; mulesoft-tls-godaddy.backup.20230720</p> <p>Update the TLS secret</p> <p>To update mulesoft-tls-godaddy TLS secret you can just edit it in yaml format ex: kubectl edit secret -n rtf mulesoft-tls-godaddy -o yaml</p> <p>You will need to update:</p> <p>'tls.crt' value with the base64.one.line of the bundle you prepared earlier</p> <p>'tls.key' value with the base64.one.line of the key you prepared earlier</p> <p>suggested is to open up another terminal, cat each one and carefully copy the hash and paste it in the editor opened by the edit of the tls secret</p> <p>Once you make sure you copy/paste correctly save the changes.</p> <p>Then you can load in a web browser 'stg.api.aws.allegiantair.com' and make sure the new cert is loaded.</p>"},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Mulesoft%2BSSL%2Bcertificate%2Brenewal/#validation-of-the-new-ssl-certificate","title":"Validation of the new SSL certificate","text":"<p>Check as an example (dependiong on the env adjust the link) https://stg.api.aws.allegiantair.com/comms-exp-api/diag</p>"},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Mulesoft%2BSSL%2Bcertificates%2Bmatrix/","title":"Mulesoft SSL certificates matrix","text":"ENV EXT/INT CN current cert EXP date Authority DEV-EXT ext.dev.api.aws.allegiantair.com Wed, 05 Jun 2024 15:40:32 GMT GoDaddy DEV-INT dev.api.aws.allegiantair.com Thu, 19 Sep 2024 17:27:02 GMT GoDaddy QA-EXT ext.qa.api.aws.allegiantair.com Wed, 05 Jun 2024 15:26:17 GMT GoDaddy QA-INT qa.api.aws.allegiantair.com Sat, 28 Sep 2024 16:24:21 GMT GoDaddy STG-EXT ext.stg.api.aws.allegiantair.com Wed, 26 Jun 2024 18:27:18 GMT GoDaddy STG-INT stg.api.aws.allegiantair.com Wed, 26 Jun 2024 18:27:16 GMT GoDaddy PRD-EXT ext.api.aws.allegiantair.com June 27, 2024 at 7:04:55 AM GoDaddy PRD-INT api.aws.allegiantair.com June 23, 2024 at 7:10:13 AM GoDaddy"},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Mulesoft%2Bapplications%2Bdeploy/","title":"Mulesoft applications deploy","text":"<p>NOTE: I have screenshots of the steps and will add them here soon.</p> <ul> <li> <p>Login to Mulesoft Anypoint Portal:     https://anypoint.mulesoft.com/login/domain/allegiant</p> <ul> <li> <p>Select \"Continue with PingFederate SSO</p> </li> <li> <p>Sign in with AD credentials</p> </li> <li> <p>Sign in with RSA token</p> </li> </ul> </li> <li> <p>First time login: check that your profile reflects AllegiantIT in     Active Business Group</p> </li> <li></li> <li> <p>Click on the top left menu and select \"Runtime Manager\"</p> </li> <li> <p>Select environment clicking on the top left button which does     identify the current selected environment.</p> </li> <li> <p>Select desired environment from the list.</p> </li> <li> <p>Once environment is switched it will identify the selected     environment in the top left corner.</p> </li> <li> <p>Use the search bar and search for the application name. At this     point there is one application named \"comms-exp-api\".</p> </li> <li> <p>Click on the link named after the application from the list below.</p> </li> <li> <p>Click on \"Choose file\" drop down menu and select \"Import file from     Exchange\"</p> </li> <li> <p>In the new popup window use the search bar and search for     \"comms-exp-api-impl\" (the actual artifact name).</p> </li> <li> <p>Click on the artifact name and then select the desired version from     the drop down menu below, then click on the \"Select\" button.</p> </li> <li> <p>On the next screen locate a blue button \"Apply changes\", this will     trigger the deploy of the artifact.</p> </li> <li> <p>Then there will be a link on the top center of the page \"View     progress\", you can click on it and watch the progress.</p> </li> <li> <p>Once the deploy does complete (it takes few minutes for the app to     deploy) you will see status \"success\" or \"failed\"</p> </li> <li> <p>Failed deploy will require review of logs and or manually login to     the cluster and check the PODs (need to add more details for     troubleshooting).</p> </li> </ul>"},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Mulesoft%2Bapplications%2Bdeploy/#mulesoft-disable-dt-log-enrichment-for-any-new-app-deployed","title":"Mulesoft - disable DT log enrichment for any new app deployed","text":"<p>1. Login to DT</p> <p>2. Go to https://gah29713.live.dynatrace.com/ui/entity/list/CONTAINER_GROUP?gtf=-2h&amp;gf=all&amp;sessionId=i1fmb7P2IpZ0jF3A</p> <p>3. Filter by K8s.container.name = 'app' and k8s.namespace = ENV_NAMESPACE</p> <p>4. CLick on the desired application</p> <p>5. Scroll down to the \"Process group\" section</p> <p>6. Select the group Name</p> <p>7. Click on top right \"Settings\" button</p> <p>8. Go to \"OneAgent features\" from the menu</p> <p>9. Click on \"Add override\"</p> <p>10. Select \"Java - Trace/span context enrichment for logs\"</p> <p>11. Select \"Java - Trace/span context enrichment for unstructured logs\"</p> <p>12. The override will have the swithch turned \"off\" by default</p> <p>13. Klick \"save shanges\" on bottom left</p> <p>14. Login to Anypoint Runtime Manager</p> <p>15. Select the desired environment</p> <p>16. Select the application, clicking on the app name</p> <p>17. Click \"Stop\" button top right</p> <p>18. Wait for a message \"Desired configuration applied successfully (At this point the Application status should be 'NOT RUNNING')</p> <p>19. Start the app, click on \"Enable\" button top right (Wait for the 'Desired configuration applied successfully' message)</p>"},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Mulesoft%2Bapplications%2Bhealth%2Bchecks/","title":"Mulesoft applications health checks","text":"<ul> <li> <p>commshub</p> <ul> <li>Health check:     https://api.aws.allegiantair.com/comms-exp-api/diag?includeExternal=true</li> </ul> </li> </ul>"},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Mulesoft%2Bsecure%2Bproperties%2Bencryption%2Bwith%2Bthe%2Bcluster%2Bmaster%2Bkey/","title":"Mulesoft secure properties encryption with the cluster master key","text":"<p>Some of the properties holding secret information are encrypted with the cluster master key. You can find the master key in Keepass under Mulesoft folder.</p> <p>There is a java jar file used to encrypt/decrypt.</p> <p>Here is the jar file attached:</p> <p></p> <p>To encrypt a secure property you will need:</p> <ul> <li> <p>java installed on the machine you are working on</p> </li> <li> <p>download the jar file secure-properties-tool.jar</p> </li> <li> <p>value of the property to be encrypted</p> </li> <li> <p>the master cluster encryption key, separate for PRD and STG, you can     find it in Keepass</p> </li> </ul> <p>Encryption of a property example:</p> <p>java -cp ./secure-properties-tool.jar com.mulesoft.tools.SecurePropertiesTool string encrypt Blowfish CBC CLUSTER_MASTER_KEY_NO_QUOTES \"VALUE_TO_BE_ENCRYPTED\"</p> <p>Decryption of a property example: (you can use this to validate that the encrypted property added to the build is correct, by trying to decrypt it)</p> <p>java -cp ./secure-properties-tool.jar com.mulesoft.tools.SecurePropertiesTool string decrypt Blowfish CBC CLUSTER_MASTER_KEY_NO_QUOTES \"ALREADY_ENCRYPTED_VALUE\"</p> <p>NOTE: If the password has \"!\" in it, you will need to type \"set +H\" on the terminal before you try to encrypt or decrypt.</p>"},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Mulesoft%2Btroubleshooting/","title":"Mulesoft troubleshooting","text":""},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Mulesoft%2Btroubleshooting/#mulesoft-access-troubleshooting-for-devqa-cluster","title":"Mulesoft Access Troubleshooting for dev/qa cluster.","text":"<p>1.Checking for cluster pods</p> <p>sganga@DESKTOP-7QAAQI2:~/mulesoft/tools$ kubectl get po -A \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Unable to connect to the server: dial tcp 172.29.3.14:443: i/o timeout</p> <p>2.\u00a0 Networking team confirms if the request is passing through firewall for the IP's listed below</p> <p>169.254.79.10, 169.254.105.70)</p> <p>3. Update the Ip's in AWS security group to allow inbound traffic\u00a0</p> <p>SG Name: \u00a0eks-cluster-sg-rtf-dev-1512825132</p> <p>Ip Cidr Range: 169.254.79.10/32, port:443</p> <p>169.254.105.70/32, port: 443</p> <p>4. Login to aws profile and switch context\u00a0</p> <p>5. Run kubectl get po -A</p>"},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Setup%2Baccess%2Bto%2BMulesoft%2Bkubernetes%2Benvironments/","title":"Setup access to Mulesoft kubernetes environments","text":""},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Setup%2Baccess%2Bto%2BMulesoft%2Bkubernetes%2Benvironments/#basic-setup-tools","title":"Basic setup - tools","text":""},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Setup%2Baccess%2Bto%2BMulesoft%2Bkubernetes%2Benvironments/#note-if-you-already-have-access-to-aws-you-can-skip-some-sections-if-you-know-what-you-are-doing-and-whats-the-section-about-also-there-is-probably-a-better-folder-structure-this-is-just-how-i-did-it-feel-free-to-organize-it-to-your-liking","title":"NOTE: If you already have access to AWS, you can skip some sections if you know what you are doing and what's the section about. Also there is probably a better folder structure, this is just how I did it, feel free to organize it to your liking.","text":"<ul> <li>create folder structure in your home folder</li> </ul> <p>mkdir -p ~/mulesoft/tools</p> <p>cd ~/mulesoft/tools</p> <ul> <li>kubectl download and install</li> </ul> <p>cd ~/mulesoft/tools</p> <p>curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"</p> <p>sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl</p> <p>kubectl version --client</p> <p>kubectl version --client --output=yaml</p> <p>kubectl cluster-info</p> <p>Note : The kubectl version should be the same as the version in the jumphost, otherwise you might see an error as \"error: exec plugin: invalid apiVersion \"client.authentication.k8s.io/v1alpha1\" . The current kubectl version in jumphost is v1.23.9 .\u00a0  </p> <p>To download v1.23.9 version : \u00a0curl -LO https://dl.k8s.io/release/v1.23.9/bin/linux/amd64/kubectl  \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl</p> <ul> <li>helm download and install</li> </ul> <p>cd ~/mulesoft/tools</p> <p>wget https://get.helm.sh/helm-v3.8.1-linux-amd64.tar.gz</p> <p>tar -xvf helm-v3.8.1-linux-amd64.tar.gz</p> <p>cp linux-amd64/helm /usr/local/bin/helm</p> <p>sudo cp linux-amd64/helm /usr/local/bin/helm</p> <ul> <li>awscliv2 download and install</li> </ul> <p>mkdir ~/mulesoft/tools/awscliv2</p> <p>cd ~/mulesoft/tools/awscliv2</p> <p>curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"</p> <p>unzip awscliv2.zip\u00a0</p> <p>sudo ./aws/install\u00a0</p> <p>aws --ver</p> <ul> <li>aws-iam-authenticator download and install</li> </ul> <p>mkdir ~/mulesoft/tools/aws-iam-authenticator</p> <p>cd ~/mulesoft/tools/aws-iam-authenticator</p> <p>curl -o aws-iam-authenticator https://s3.us-west-2.amazonaws.com/amazon-eks/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator</p> <p>chmod +x ./aws-iam-authenticator</p> <p>mkdir -p $HOME/bin &amp;&amp; cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator &amp;&amp; export PATH=$PATH:$HOME/bin</p> <p>echo 'export PATH=$PATH:$HOME/bin' &gt;&gt; ~/.bashrc</p> <p>aws-iam-authenticator help</p> <ul> <li>aws_utils clone the repo and install</li> </ul> <p>git clone --branch better_auth ssh://git@git.allegiantair.com:7999/devops/aws_utils.git</p> <p>python3 -m pip install aws_utils/</p> <p>awsauth -u yavor.marinov --refresh</p> <p>use 'awsauth' to login and start your token</p> <ul> <li>rtfctl</li> </ul> <p>only needed when interacting with Mulesoft Runtime Fabric\u00a0</p> <p>Install rtfctl</p> <p>curl -L https://anypoint.mulesoft.com/runtimefabric/api/download/rtfctl/latest -o rtfctl</p> <p>sudo chmod +x rtfctl</p> <p>mkdir ~/.local_apps &amp;&amp; mv rtfctl ~/.local_apps</p> <p>sudo ln ~/.local_apps/rtfctl /usr/local/bin/rtfctl</p>"},{"location":"Mulesoft%2BLinux%2BEngineering%2BHowto/Setup%2Baccess%2Bto%2BMulesoft%2Bkubernetes%2Benvironments/#access-mulesoft-environment","title":"Access Mulesoft environment","text":"<ul> <li>authenticate with awsauth - Example</li> </ul> <p>NOTE: Use g4aws-mule-dev_241387238312_AWS-Role-SysEng for QA environment</p> <p>Create .aws and .kube folder in your home directory and then proceed with the below steps.</p> <p>[yavor.marinov@XYZ]$ awsauth\u00a0</p> <p>Allegiant Air - awsauth v0.0.10</p> <p>Username (yavor.marinov):\u00a0</p> <p>Password:\u00a0</p> <p>SAML assertion includes 9 roles, now generating STS credentials.</p> <p>Credential written for g4aws-mule-dev_241387238312_AWS-Role-SysEng, Expires in 1 hour.</p> <p>Credential written for g4aws-mule-qa_286984770123_AWS-Role-SysEng, Expires in 1 hour.</p> <p>Credential written for g4aws-ops-util_405865296163_AWS-Role-SysEng, Expires in 1 hour.</p> <p>Credential written for g4aws-mule-stage_510308003276_AWS-Role-SysEng, Expires in 1 hour.</p> <p>Credential written for g4aws-sdlc_697867080916_AWS-Role-SysEng, Expires in 1 hour.</p> <p>Credential written for g4aws-mule-prod_737124451512_AWS-Role-SysEng, Expires in 1 hour.</p> <p>Credential written for g4aws-prod_737225616887_AWS-Role-SysEng, Expires in 1 hour.</p> <p>Credential written for g4aws-master_759062848102_AWS-Role-SysEng, Expires in 1 hour.</p> <p>Credential written for g4aws-prod-dr_879624941994_AWS-Role-SysEng, Expires in 1 hour.</p> <p>----------------------------------------------------------------</p> <p>Your new access key pair(s) has been stored in the AWS configuration file</p> <p>To use this credential, call the AWS CLI with the --profile option (e.g. aws --profile \\&lt;profilename&gt; sts get-caller-identity).</p> <p>----------------------------------------------------------------</p> <ul> <li>You can see your roles in the aws credentials file</li> </ul> <p>cat ~/.aws/credentials</p> <ul> <li>You can see a profile identity for example - clear your profile     and reassign it to the desired environment, example is STG</li> </ul> <p>export AWS_DEFAULT_PROFILE=</p> <p>export AWS_DEFAULT_PROFILE=\"g4aws-mule-stage_510308003276_AWS-Role-SysEng\"</p> <ul> <li>Check your current identity setup</li> </ul> <p>aws sts get-caller-identity</p> <ul> <li>Clone Anypoint Mulesoft repositories for the desired environment</li> </ul> <p># DEV</p> <p>clone ssh://git@git.allegiantair.com:7999/mule/anypoint-rtf-dev.git</p> <p># QA</p> <p>clone ssh://git@git.allegiantair.com:7999/mule/anypoint-rtf-qa.git</p> <p># STG</p> <p>clone ssh://git@git.allegiantair.com:7999/mule/anypoint-rtf-stage.git</p> <p># PRD</p> <p>clone ssh://git@git.allegiantair.com:7999/mule/anypoint-rtf-prod.git</p> <ul> <li>Setup your kubeconfig - Example for STG afrer the repo is cloned</li> </ul> <p>cd anypoint-rtf-stage</p> <p>cd eks/</p> <p>cat kubeconfig_rtf-stage &gt; ~/.kube/config\u00a0</p> <ul> <li>Test it - you should see nodes and pods listed</li> </ul> <p>kubectl config current-context</p> <p>kubectl get nodes</p> <p>kubectl get pods -A</p>"},{"location":"tags/","title":"Tag Index","text":""}]}